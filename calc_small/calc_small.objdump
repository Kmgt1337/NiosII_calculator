
calc_small.elf:     file format elf32-littlenios2
calc_small.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000008cc memsz 0x000008cc flags r-x
    LOAD off    0x000018ec vaddr 0x000208ec paddr 0x000209e0 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00000ad4 vaddr 0x00020ad4 paddr 0x00020ad4 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-
    LOAD off    0x00002000 vaddr 0x00030000 paddr 0x00030000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00030000  00030000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00002020  2**0
                  CONTENTS
  2 .text         00000890  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  000208b0  000208b0  000018b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  000208ec  000209e0  000018ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  00020ad4  00020ad4  00001ad4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_1 00000000  00020aec  00020aec  00002020  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00030020  00030020  00002020  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002f8  00000000  00000000  00002050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00003198  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001544  00000000  00000000  000054e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0000112a  00000000  00000000  00006a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  000003c0  00000000  00000000  00007b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000008f0  00000000  00000000  00007f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  00008800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000020  00000000  00000000  00008840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00000ab5  00000000  00000000  00008860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000000fa  00000000  00000000  00009315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000ab4  00000000  00000000  0000940f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  0000b15e  2**0
                  CONTENTS, READONLY
 21 .cpu          0000000c  00000000  00000000  0000b161  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  0000b16d  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  0000b16e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0000b16f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0000b17a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0000b185  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000005  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001e  00000000  00000000  0000b195  2**0
                  CONTENTS, READONLY
 29 .jdi          00004f06  00000000  00000000  0000b1b3  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004a6dd  00000000  00000000  000100b9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00030000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
000208b0 l    d  .rodata	00000000 .rodata
000208ec l    d  .rwdata	00000000 .rwdata
00020ad4 l    d  .bss	00000000 .bss
00020aec l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00030020 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000208ec l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00020680 g     F .text	0000002c alt_main
00020458 g     F .text	00000080 _puts_r
000209e0 g       *ABS*	00000000 __flash_rwdata_start
00020ae4 g     O .bss	00000004 altera_avalon_timer_ts_freq
00020880 g     F .text	00000008 altera_nios2_gen2_irq_init
00030000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00020ad4 g     O .bss	00000004 errno
00020adc g     O .bss	00000004 alt_argv
000289d0 g       *ABS*	00000000 _gp
000206ac g     F .text	00000004 usleep
00020888 g     F .text	00000028 memcpy
000204d8 g     F .text	00000010 puts
000200f4 g     F .text	00000004 set_neg
00030000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00020370 g     F .text	00000064 .hidden __udivsi3
000209d0 g     O .rwdata	00000004 _global_impure_ptr
00020aec g       *ABS*	00000000 __bss_end
00020878 g     F .text	00000004 alt_dcache_flush_all
000209e0 g       *ABS*	00000000 __ram_rwdata_end
000206b0 g     F .text	0000005c write
000207e0 g     F .text	00000008 alt_timestamp_freq
000208ec g       *ABS*	00000000 __ram_rodata_end
000209d8 g     O .rwdata	00000004 jtag_uart_0
000203d4 g     F .text	0000005c .hidden __umodsi3
00020aec g       *ABS*	00000000 end
0002fa00 g       *ABS*	00000000 __alt_stack_pointer
00020748 g     F .text	00000030 altera_avalon_jtag_uart_write
00020020 g     F .text	0000003c _start
0002072c g     F .text	0000001c alt_sys_init
00020430 g     F .text	00000028 .hidden __mulsi3
000208ec g       *ABS*	00000000 __ram_rwdata_start
000208b0 g       *ABS*	00000000 __ram_rodata_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
000207e8 g     F .text	00000090 alt_busy_sleep
00020aec g       *ABS*	00000000 __alt_stack_base
0002005c g     F .text	00000068 delay_us
000200c4 g     F .text	00000030 extract_bits
00020504 g     F .text	000000a8 __sfvwrite_small_dev
00020ad4 g       *ABS*	00000000 __bss_start
000200f8 g     F .text	00000184 main
00020ad8 g     O .bss	00000004 alt_envp
00020778 g     F .text	00000038 alt_timestamp_start
000209dc g     O .rwdata	00000004 alt_errno
0002027c g     F .text	00000080 .hidden __divsi3
000208b0 g       *ABS*	00000000 __flash_rodata_start
0002070c g     F .text	00000020 alt_irq_init
000205ac g     F .text	00000050 _write_r
000209d4 g     O .rwdata	00000004 _impure_ptr
00020ae0 g     O .bss	00000004 alt_argc
00020ae8 g     O .bss	00000004 altera_avalon_timer_ts_base
00020020 g       *ABS*	00000000 __ram_exceptions_start
000207b0 g     F .text	00000030 alt_timestamp
000209e0 g       *ABS*	00000000 _edata
00020aec g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
000202fc g     F .text	00000074 .hidden __modsi3
0002fa00 g       *ABS*	00000000 __alt_data_end
0003000c g       .entry	00000000 _exit
000204e8 g     F .text	0000001c strlen
0002087c g     F .text	00000004 alt_icache_flush_all
000205fc g     F .text	00000084 alt_load



Disassembly of section .entry:

00030000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   30000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   30004:	08400814 	ori	at,at,32
    jmp r1
   30008:	0800683a 	jmp	at

0003000c <_exit>:
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	defe8014 	ori	sp,sp,64000
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a27414 	ori	gp,gp,35280
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20034:	1082b514 	ori	r2,r2,2772

    movhi r3, %hi(__bss_end)
   20038:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2003c:	18c2bb14 	ori	r3,r3,2796

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00205fc0 	call	205fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00206800 	call	20680 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <alt_after_alt_main>

0002005c <delay_us>:
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"
#include "sys/alt_timestamp.h"

void delay_us(unsigned int microseconds)
{
   2005c:	defffc04 	addi	sp,sp,-16
   20060:	dfc00315 	stw	ra,12(sp)
   20064:	dc800215 	stw	r18,8(sp)
   20068:	dc400115 	stw	r17,4(sp)
   2006c:	dc000015 	stw	r16,0(sp)
   20070:	2023883a 	mov	r17,r4
    alt_u32 ticks_per_us = alt_timestamp_freq() / 1000000;
   20074:	00207e00 	call	207e0 <alt_timestamp_freq>
   20078:	1025883a 	mov	r18,r2
    alt_u32 end = alt_timestamp() + (ticks_per_us * microseconds);
   2007c:	00207b00 	call	207b0 <alt_timestamp>
    alt_u32 ticks_per_us = alt_timestamp_freq() / 1000000;
   20080:	014003f4 	movhi	r5,15
   20084:	29509004 	addi	r5,r5,16960
   20088:	9009883a 	mov	r4,r18
    alt_u32 end = alt_timestamp() + (ticks_per_us * microseconds);
   2008c:	1021883a 	mov	r16,r2
    alt_u32 ticks_per_us = alt_timestamp_freq() / 1000000;
   20090:	00203700 	call	20370 <__udivsi3>
    alt_u32 end = alt_timestamp() + (ticks_per_us * microseconds);
   20094:	880b883a 	mov	r5,r17
   20098:	1009883a 	mov	r4,r2
   2009c:	00204300 	call	20430 <__mulsi3>
   200a0:	1421883a 	add	r16,r2,r16
    while (alt_timestamp() < end);
   200a4:	00207b00 	call	207b0 <alt_timestamp>
   200a8:	143ffe36 	bltu	r2,r16,200a4 <delay_us+0x48>
}
   200ac:	dfc00317 	ldw	ra,12(sp)
   200b0:	dc800217 	ldw	r18,8(sp)
   200b4:	dc400117 	ldw	r17,4(sp)
   200b8:	dc000017 	ldw	r16,0(sp)
   200bc:	dec00404 	addi	sp,sp,16
   200c0:	f800283a 	ret

000200c4 <extract_bits>:
#define EXTRACT_BIT(num, mask, pos) ((num) & (mask)) >> (pos)
#define SET_BIT(num, pos) ((num) |= (1U << (pos)))

alt_16 extract_bits(alt_16 orig16BitWord, unsigned from, unsigned to)
{
  unsigned mask = ( (1<<(to-from+1))-1) << from;
   200c4:	314dc83a 	sub	r6,r6,r5
   200c8:	31800044 	addi	r6,r6,1
   200cc:	00c00044 	movi	r3,1
   200d0:	1986983a 	sll	r3,r3,r6
  return (orig16BitWord & mask) >> from;
   200d4:	213fffcc 	andi	r4,r4,65535
   200d8:	2120001c 	xori	r4,r4,32768
  unsigned mask = ( (1<<(to-from+1))-1) << from;
   200dc:	18ffffc4 	addi	r3,r3,-1
   200e0:	1946983a 	sll	r3,r3,r5
  return (orig16BitWord & mask) >> from;
   200e4:	21200004 	addi	r4,r4,-32768
   200e8:	1906703a 	and	r3,r3,r4
}
   200ec:	1944d83a 	srl	r2,r3,r5
   200f0:	f800283a 	ret

000200f4 <set_neg>:

void set_neg(alt_16 num, alt_8 neg_in)
{
	if(neg_in == 1) num = -num;
}
   200f4:	f800283a 	ret

000200f8 <main>:

int main()
{ 
  printf("Pomyslnie uruchomiono program\n");
   200f8:	010000b4 	movhi	r4,2
{ 
   200fc:	defffb04 	addi	sp,sp,-20
  printf("Pomyslnie uruchomiono program\n");
   20100:	21022c04 	addi	r4,r4,2224
{ 
   20104:	dfc00415 	stw	ra,16(sp)
   20108:	dcc00315 	stw	r19,12(sp)
   2010c:	dc800215 	stw	r18,8(sp)
   20110:	dc400115 	stw	r17,4(sp)
   20114:	dc000015 	stw	r16,0(sp)
  printf("Pomyslnie uruchomiono program\n");
   20118:	00204d80 	call	204d8 <puts>
  alt_u16 input;
  if(alt_timestamp_start() < 0)
   2011c:	00207780 	call	20778 <alt_timestamp_start>
   20120:	10004b16 	blt	r2,zero,20250 <main+0x158>

			  if(op == 1) result += num2;
			  if(op == 2) result -= num2;
			  if(op == 3) result *= num2;
			  if(op == 4 && num2 != 0) result /= num2;
			  usleep(300000);
   20124:	04800174 	movhi	r18,5
  alt_16 result = 0;
   20128:	0021883a 	mov	r16,zero
  alt_8 op = 0;
   2012c:	0027883a 	mov	r19,zero
			  usleep(300000);
   20130:	94a4f804 	addi	r18,r18,-27680
	  num1 = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
   20134:	00800134 	movhi	r2,4
   20138:	11441c37 	ldwio	r5,4208(r2)
	  add = EXTRACT_BIT(num1, ADD_MASK, ADD_POS);
   2013c:	28bfffcc 	andi	r2,r5,65535
	  substr = EXTRACT_BIT(num1, SUBSTRACT_MASK, SUBSTRACT_POS);
   20140:	1007d1ba 	srai	r3,r2,6
	  equal = EXTRACT_BIT(num1, EQUAL_MASK, EQUAL_POS);
   20144:	1004957a 	slli	r2,r2,21
   20148:	298007cc 	andi	r6,r5,31
	  substr = EXTRACT_BIT(num1, SUBSTRACT_MASK, SUBSTRACT_POS);
   2014c:	18c0004c 	andi	r3,r3,1
	  equal = -equal;
   20150:	1005d7fa 	srai	r2,r2,31
	  substr = EXTRACT_BIT(num1, SUBSTRACT_MASK, SUBSTRACT_POS);
   20154:	1809883a 	mov	r4,r3
	  num1 = extract_bits(num1, 0, 4);
   20158:	18c03fcc 	andi	r3,r3,255
   2015c:	18c0201c 	xori	r3,r3,128
	  if(add == 1)
   20160:	2940080c 	andi	r5,r5,32
   20164:	3023883a 	mov	r17,r6
   20168:	18ffe004 	addi	r3,r3,-128
   2016c:	10803fcc 	andi	r2,r2,255
   20170:	28000b26 	beq	r5,zero,201a0 <main+0xa8>
	  if(substr == 1)
   20174:	18000b1e 	bne	r3,zero,201a4 <main+0xac>
	  if(equal == 0)
   20178:	1000071e 	bne	r2,zero,20198 <main+0xa0>
			  num2 = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
   2017c:	00800134 	movhi	r2,4
   20180:	14441c37 	ldwio	r17,4208(r2)
			  usleep(300000);
   20184:	01000174 	movhi	r4,5
			  if(op == 1) result += num2;
   20188:	8c4007cc 	andi	r17,r17,31
			  usleep(300000);
   2018c:	2124f804 	addi	r4,r4,-27680
			  if(op == 1) result += num2;
   20190:	3463883a 	add	r17,r6,r17
			  usleep(300000);
   20194:	00206ac0 	call	206ac <usleep>
		  op = 1;
   20198:	01000044 	movi	r4,1
   2019c:	00002006 	br	20220 <main+0x128>
	  if(substr == 1)
   201a0:	18000826 	beq	r3,zero,201c4 <main+0xcc>
	  if(equal == 0)
   201a4:	1000261e 	bne	r2,zero,20240 <main+0x148>
			  num2 = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
   201a8:	00800134 	movhi	r2,4
   201ac:	10841c37 	ldwio	r2,4208(r2)
			  num2 = extract_bits(num2, 0, 4);
   201b0:	108007cc 	andi	r2,r2,31
		  result = num1;
   201b4:	3021883a 	mov	r16,r6
			  if(op == 2) result -= num2;
   201b8:	80a1c83a 	sub	r16,r16,r2
   201bc:	04c00084 	movi	r19,2
   201c0:	00000f06 	br	20200 <main+0x108>
	  if(equal == 0)
   201c4:	1000101e 	bne	r2,zero,20208 <main+0x110>
		  if(op > 0 && op < 5)
   201c8:	98bfffc4 	addi	r2,r19,-1
   201cc:	10803fcc 	andi	r2,r2,255
   201d0:	10800128 	cmpgeui	r2,r2,4
   201d4:	10000d1e 	bne	r2,zero,2020c <main+0x114>
			  num2 = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
   201d8:	00800134 	movhi	r2,4
   201dc:	10c41c37 	ldwio	r3,4208(r2)
			  if(op == 1) result += num2;
   201e0:	99003fcc 	andi	r4,r19,255
   201e4:	2100201c 	xori	r4,r4,128
   201e8:	213fe004 	addi	r4,r4,-128
   201ec:	18c007cc 	andi	r3,r3,31
   201f0:	21000058 	cmpnei	r4,r4,1
   201f4:	1805883a 	mov	r2,r3
   201f8:	203fef1e 	bne	r4,zero,201b8 <main+0xc0>
   201fc:	1c21883a 	add	r16,r3,r16
			  usleep(300000);
   20200:	9009883a 	mov	r4,r18
   20204:	00206ac0 	call	206ac <usleep>
   20208:	9809883a 	mov	r4,r19
			  //printf("Result2222222222222=%d\n", result);
		  }
		  //usleep(1000000);
		  //usleep(1000000);
	  }
	  if(result < 0) SET_BIT(result, 10);
   2020c:	80bfffcc 	andi	r2,r16,65535
   20210:	10a0001c 	xori	r2,r2,32768
   20214:	10a00004 	addi	r2,r2,-32768
   20218:	10000b0e 	bge	r2,zero,20248 <main+0x150>
   2021c:	84410014 	ori	r17,r16,1024
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_1_BASE, result);
   20220:	88ffffcc 	andi	r3,r17,65535
   20224:	18e0001c 	xori	r3,r3,32768
   20228:	18e00004 	addi	r3,r3,-32768
   2022c:	00800134 	movhi	r2,4
   20230:	10c41835 	stwio	r3,4192(r2)
	  num1 = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
   20234:	8821883a 	mov	r16,r17
   20238:	2027883a 	mov	r19,r4
   2023c:	003fbd06 	br	20134 <main+0x3c>
		  op = 2;
   20240:	01000084 	movi	r4,2
   20244:	003ff606 	br	20220 <main+0x128>
   20248:	8023883a 	mov	r17,r16
   2024c:	003ff406 	br	20220 <main+0x128>
	  printf("Brak timera w systemie!\n");
   20250:	010000b4 	movhi	r4,2
   20254:	21023404 	addi	r4,r4,2256
   20258:	00204d80 	call	204d8 <puts>
  }

  return 0;
}
   2025c:	00800044 	movi	r2,1
   20260:	dfc00417 	ldw	ra,16(sp)
   20264:	dcc00317 	ldw	r19,12(sp)
   20268:	dc800217 	ldw	r18,8(sp)
   2026c:	dc400117 	ldw	r17,4(sp)
   20270:	dc000017 	ldw	r16,0(sp)
   20274:	dec00504 	addi	sp,sp,20
   20278:	f800283a 	ret

0002027c <__divsi3>:
   2027c:	20001a16 	blt	r4,zero,202e8 <__divsi3+0x6c>
   20280:	000f883a 	mov	r7,zero
   20284:	2800020e 	bge	r5,zero,20290 <__divsi3+0x14>
   20288:	014bc83a 	sub	r5,zero,r5
   2028c:	39c0005c 	xori	r7,r7,1
   20290:	200d883a 	mov	r6,r4
   20294:	00c00044 	movi	r3,1
   20298:	2900092e 	bgeu	r5,r4,202c0 <__divsi3+0x44>
   2029c:	00800804 	movi	r2,32
   202a0:	00c00044 	movi	r3,1
   202a4:	00000106 	br	202ac <__divsi3+0x30>
   202a8:	10001226 	beq	r2,zero,202f4 <__divsi3+0x78>
   202ac:	294b883a 	add	r5,r5,r5
   202b0:	10bfffc4 	addi	r2,r2,-1
   202b4:	18c7883a 	add	r3,r3,r3
   202b8:	293ffb36 	bltu	r5,r4,202a8 <__divsi3+0x2c>
   202bc:	18000d26 	beq	r3,zero,202f4 <__divsi3+0x78>
   202c0:	0005883a 	mov	r2,zero
   202c4:	31400236 	bltu	r6,r5,202d0 <__divsi3+0x54>
   202c8:	314dc83a 	sub	r6,r6,r5
   202cc:	10c4b03a 	or	r2,r2,r3
   202d0:	1806d07a 	srli	r3,r3,1
   202d4:	280ad07a 	srli	r5,r5,1
   202d8:	183ffa1e 	bne	r3,zero,202c4 <__divsi3+0x48>
   202dc:	38000126 	beq	r7,zero,202e4 <__divsi3+0x68>
   202e0:	0085c83a 	sub	r2,zero,r2
   202e4:	f800283a 	ret
   202e8:	0109c83a 	sub	r4,zero,r4
   202ec:	01c00044 	movi	r7,1
   202f0:	003fe406 	br	20284 <__divsi3+0x8>
   202f4:	0005883a 	mov	r2,zero
   202f8:	003ff806 	br	202dc <__divsi3+0x60>

000202fc <__modsi3>:
   202fc:	20001716 	blt	r4,zero,2035c <__modsi3+0x60>
   20300:	000f883a 	mov	r7,zero
   20304:	2005883a 	mov	r2,r4
   20308:	2800010e 	bge	r5,zero,20310 <__modsi3+0x14>
   2030c:	014bc83a 	sub	r5,zero,r5
   20310:	00c00044 	movi	r3,1
   20314:	2900092e 	bgeu	r5,r4,2033c <__modsi3+0x40>
   20318:	01800804 	movi	r6,32
   2031c:	00c00044 	movi	r3,1
   20320:	00000106 	br	20328 <__modsi3+0x2c>
   20324:	30001026 	beq	r6,zero,20368 <__modsi3+0x6c>
   20328:	294b883a 	add	r5,r5,r5
   2032c:	31bfffc4 	addi	r6,r6,-1
   20330:	18c7883a 	add	r3,r3,r3
   20334:	293ffb36 	bltu	r5,r4,20324 <__modsi3+0x28>
   20338:	18000b26 	beq	r3,zero,20368 <__modsi3+0x6c>
   2033c:	1806d07a 	srli	r3,r3,1
   20340:	11400136 	bltu	r2,r5,20348 <__modsi3+0x4c>
   20344:	1145c83a 	sub	r2,r2,r5
   20348:	280ad07a 	srli	r5,r5,1
   2034c:	183ffb1e 	bne	r3,zero,2033c <__modsi3+0x40>
   20350:	38000126 	beq	r7,zero,20358 <__modsi3+0x5c>
   20354:	0085c83a 	sub	r2,zero,r2
   20358:	f800283a 	ret
   2035c:	0109c83a 	sub	r4,zero,r4
   20360:	01c00044 	movi	r7,1
   20364:	003fe706 	br	20304 <__modsi3+0x8>
   20368:	2005883a 	mov	r2,r4
   2036c:	003ff806 	br	20350 <__modsi3+0x54>

00020370 <__udivsi3>:
   20370:	200d883a 	mov	r6,r4
   20374:	2900152e 	bgeu	r5,r4,203cc <__udivsi3+0x5c>
   20378:	28001416 	blt	r5,zero,203cc <__udivsi3+0x5c>
   2037c:	00800804 	movi	r2,32
   20380:	00c00044 	movi	r3,1
   20384:	00000206 	br	20390 <__udivsi3+0x20>
   20388:	10000e26 	beq	r2,zero,203c4 <__udivsi3+0x54>
   2038c:	28000416 	blt	r5,zero,203a0 <__udivsi3+0x30>
   20390:	294b883a 	add	r5,r5,r5
   20394:	10bfffc4 	addi	r2,r2,-1
   20398:	18c7883a 	add	r3,r3,r3
   2039c:	293ffa36 	bltu	r5,r4,20388 <__udivsi3+0x18>
   203a0:	18000826 	beq	r3,zero,203c4 <__udivsi3+0x54>
   203a4:	0005883a 	mov	r2,zero
   203a8:	31400236 	bltu	r6,r5,203b4 <__udivsi3+0x44>
   203ac:	314dc83a 	sub	r6,r6,r5
   203b0:	10c4b03a 	or	r2,r2,r3
   203b4:	1806d07a 	srli	r3,r3,1
   203b8:	280ad07a 	srli	r5,r5,1
   203bc:	183ffa1e 	bne	r3,zero,203a8 <__udivsi3+0x38>
   203c0:	f800283a 	ret
   203c4:	0005883a 	mov	r2,zero
   203c8:	f800283a 	ret
   203cc:	00c00044 	movi	r3,1
   203d0:	003ff406 	br	203a4 <__udivsi3+0x34>

000203d4 <__umodsi3>:
   203d4:	2005883a 	mov	r2,r4
   203d8:	2900132e 	bgeu	r5,r4,20428 <__umodsi3+0x54>
   203dc:	28001216 	blt	r5,zero,20428 <__umodsi3+0x54>
   203e0:	01800804 	movi	r6,32
   203e4:	00c00044 	movi	r3,1
   203e8:	00000206 	br	203f4 <__umodsi3+0x20>
   203ec:	30000c26 	beq	r6,zero,20420 <__umodsi3+0x4c>
   203f0:	28000416 	blt	r5,zero,20404 <__umodsi3+0x30>
   203f4:	294b883a 	add	r5,r5,r5
   203f8:	31bfffc4 	addi	r6,r6,-1
   203fc:	18c7883a 	add	r3,r3,r3
   20400:	293ffa36 	bltu	r5,r4,203ec <__umodsi3+0x18>
   20404:	18000626 	beq	r3,zero,20420 <__umodsi3+0x4c>
   20408:	1806d07a 	srli	r3,r3,1
   2040c:	11400136 	bltu	r2,r5,20414 <__umodsi3+0x40>
   20410:	1145c83a 	sub	r2,r2,r5
   20414:	280ad07a 	srli	r5,r5,1
   20418:	183ffb1e 	bne	r3,zero,20408 <__umodsi3+0x34>
   2041c:	f800283a 	ret
   20420:	2005883a 	mov	r2,r4
   20424:	f800283a 	ret
   20428:	00c00044 	movi	r3,1
   2042c:	003ff606 	br	20408 <__umodsi3+0x34>

00020430 <__mulsi3>:
   20430:	0005883a 	mov	r2,zero
   20434:	20000726 	beq	r4,zero,20454 <__mulsi3+0x24>
   20438:	20c0004c 	andi	r3,r4,1
   2043c:	2008d07a 	srli	r4,r4,1
   20440:	18000126 	beq	r3,zero,20448 <__mulsi3+0x18>
   20444:	1145883a 	add	r2,r2,r5
   20448:	294b883a 	add	r5,r5,r5
   2044c:	203ffa1e 	bne	r4,zero,20438 <__mulsi3+0x8>
   20450:	f800283a 	ret
   20454:	f800283a 	ret

00020458 <_puts_r>:
   20458:	defffd04 	addi	sp,sp,-12
   2045c:	dc000015 	stw	r16,0(sp)
   20460:	2021883a 	mov	r16,r4
   20464:	2809883a 	mov	r4,r5
   20468:	dfc00215 	stw	ra,8(sp)
   2046c:	dc400115 	stw	r17,4(sp)
   20470:	2823883a 	mov	r17,r5
   20474:	00204e80 	call	204e8 <strlen>
   20478:	81400217 	ldw	r5,8(r16)
   2047c:	00c000b4 	movhi	r3,2
   20480:	18c14104 	addi	r3,r3,1284
   20484:	28c00115 	stw	r3,4(r5)
   20488:	100f883a 	mov	r7,r2
   2048c:	880d883a 	mov	r6,r17
   20490:	8009883a 	mov	r4,r16
   20494:	00205040 	call	20504 <__sfvwrite_small_dev>
   20498:	10ffffe0 	cmpeqi	r3,r2,-1
   2049c:	1800091e 	bne	r3,zero,204c4 <_puts_r+0x6c>
   204a0:	81400217 	ldw	r5,8(r16)
   204a4:	018000b4 	movhi	r6,2
   204a8:	01c00044 	movi	r7,1
   204ac:	28800117 	ldw	r2,4(r5)
   204b0:	31823a04 	addi	r6,r6,2280
   204b4:	8009883a 	mov	r4,r16
   204b8:	103ee83a 	callr	r2
   204bc:	10bfffe0 	cmpeqi	r2,r2,-1
   204c0:	0085c83a 	sub	r2,zero,r2
   204c4:	dfc00217 	ldw	ra,8(sp)
   204c8:	dc400117 	ldw	r17,4(sp)
   204cc:	dc000017 	ldw	r16,0(sp)
   204d0:	dec00304 	addi	sp,sp,12
   204d4:	f800283a 	ret

000204d8 <puts>:
   204d8:	008000b4 	movhi	r2,2
   204dc:	200b883a 	mov	r5,r4
   204e0:	11027517 	ldw	r4,2516(r2)
   204e4:	00204581 	jmpi	20458 <_puts_r>

000204e8 <strlen>:
   204e8:	2005883a 	mov	r2,r4
   204ec:	10c00007 	ldb	r3,0(r2)
   204f0:	1800021e 	bne	r3,zero,204fc <strlen+0x14>
   204f4:	1105c83a 	sub	r2,r2,r4
   204f8:	f800283a 	ret
   204fc:	10800044 	addi	r2,r2,1
   20500:	003ffa06 	br	204ec <strlen+0x4>

00020504 <__sfvwrite_small_dev>:
   20504:	2880000b 	ldhu	r2,0(r5)
   20508:	1080020c 	andi	r2,r2,8
   2050c:	10002526 	beq	r2,zero,205a4 <__sfvwrite_small_dev+0xa0>
   20510:	2880008f 	ldh	r2,2(r5)
   20514:	defffb04 	addi	sp,sp,-20
   20518:	dcc00315 	stw	r19,12(sp)
   2051c:	dc800215 	stw	r18,8(sp)
   20520:	dc400115 	stw	r17,4(sp)
   20524:	dc000015 	stw	r16,0(sp)
   20528:	dfc00415 	stw	ra,16(sp)
   2052c:	2027883a 	mov	r19,r4
   20530:	2821883a 	mov	r16,r5
   20534:	3025883a 	mov	r18,r6
   20538:	3823883a 	mov	r17,r7
   2053c:	1000100e 	bge	r2,zero,20580 <__sfvwrite_small_dev+0x7c>
   20540:	8080000b 	ldhu	r2,0(r16)
   20544:	10801014 	ori	r2,r2,64
   20548:	8080000d 	sth	r2,0(r16)
   2054c:	00bfffc4 	movi	r2,-1
   20550:	00000d06 	br	20588 <__sfvwrite_small_dev+0x84>
   20554:	88810050 	cmplti	r2,r17,1025
   20558:	880f883a 	mov	r7,r17
   2055c:	1000011e 	bne	r2,zero,20564 <__sfvwrite_small_dev+0x60>
   20560:	01c10004 	movi	r7,1024
   20564:	8140008f 	ldh	r5,2(r16)
   20568:	900d883a 	mov	r6,r18
   2056c:	9809883a 	mov	r4,r19
   20570:	00205ac0 	call	205ac <_write_r>
   20574:	00bff20e 	bge	zero,r2,20540 <__sfvwrite_small_dev+0x3c>
   20578:	88a3c83a 	sub	r17,r17,r2
   2057c:	90a5883a 	add	r18,r18,r2
   20580:	047ff416 	blt	zero,r17,20554 <__sfvwrite_small_dev+0x50>
   20584:	0005883a 	mov	r2,zero
   20588:	dfc00417 	ldw	ra,16(sp)
   2058c:	dcc00317 	ldw	r19,12(sp)
   20590:	dc800217 	ldw	r18,8(sp)
   20594:	dc400117 	ldw	r17,4(sp)
   20598:	dc000017 	ldw	r16,0(sp)
   2059c:	dec00504 	addi	sp,sp,20
   205a0:	f800283a 	ret
   205a4:	00bfffc4 	movi	r2,-1
   205a8:	f800283a 	ret

000205ac <_write_r>:
   205ac:	defffe04 	addi	sp,sp,-8
   205b0:	dc000015 	stw	r16,0(sp)
   205b4:	008000b4 	movhi	r2,2
   205b8:	2021883a 	mov	r16,r4
   205bc:	2809883a 	mov	r4,r5
   205c0:	300b883a 	mov	r5,r6
   205c4:	380d883a 	mov	r6,r7
   205c8:	dfc00115 	stw	ra,4(sp)
   205cc:	1002b515 	stw	zero,2772(r2)
   205d0:	00206b00 	call	206b0 <write>
   205d4:	10ffffd8 	cmpnei	r3,r2,-1
   205d8:	1800041e 	bne	r3,zero,205ec <_write_r+0x40>
   205dc:	00c000b4 	movhi	r3,2
   205e0:	18c2b517 	ldw	r3,2772(r3)
   205e4:	18000126 	beq	r3,zero,205ec <_write_r+0x40>
   205e8:	80c00015 	stw	r3,0(r16)
   205ec:	dfc00117 	ldw	ra,4(sp)
   205f0:	dc000017 	ldw	r16,0(sp)
   205f4:	dec00204 	addi	sp,sp,8
   205f8:	f800283a 	ret

000205fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   205fc:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20600:	010000b4 	movhi	r4,2
   20604:	014000b4 	movhi	r5,2
   20608:	dfc00015 	stw	ra,0(sp)
   2060c:	21023b04 	addi	r4,r4,2284
   20610:	29427804 	addi	r5,r5,2528
   20614:	21400426 	beq	r4,r5,20628 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   20618:	018000b4 	movhi	r6,2
   2061c:	31827804 	addi	r6,r6,2528
   20620:	310dc83a 	sub	r6,r6,r4
   20624:	00208880 	call	20888 <memcpy>
  if (to != from)
   20628:	010000b4 	movhi	r4,2
   2062c:	014000b4 	movhi	r5,2
   20630:	21000804 	addi	r4,r4,32
   20634:	29400804 	addi	r5,r5,32
   20638:	21400426 	beq	r4,r5,2064c <alt_load+0x50>
      *to++ = *from++;
   2063c:	018000b4 	movhi	r6,2
   20640:	31800804 	addi	r6,r6,32
   20644:	310dc83a 	sub	r6,r6,r4
   20648:	00208880 	call	20888 <memcpy>
  if (to != from)
   2064c:	010000b4 	movhi	r4,2
   20650:	014000b4 	movhi	r5,2
   20654:	21022c04 	addi	r4,r4,2224
   20658:	29422c04 	addi	r5,r5,2224
   2065c:	21400426 	beq	r4,r5,20670 <alt_load+0x74>
      *to++ = *from++;
   20660:	018000b4 	movhi	r6,2
   20664:	31823b04 	addi	r6,r6,2284
   20668:	310dc83a 	sub	r6,r6,r4
   2066c:	00208880 	call	20888 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20670:	00208780 	call	20878 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   20674:	dfc00017 	ldw	ra,0(sp)
   20678:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   2067c:	002087c1 	jmpi	2087c <alt_icache_flush_all>

00020680 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20680:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20684:	0009883a 	mov	r4,zero
{
   20688:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   2068c:	002070c0 	call	2070c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20690:	002072c0 	call	2072c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   20694:	d1a04217 	ldw	r6,-32504(gp)
   20698:	d1604317 	ldw	r5,-32500(gp)
   2069c:	d1204417 	ldw	r4,-32496(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   206a0:	dfc00017 	ldw	ra,0(sp)
   206a4:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   206a8:	00200f81 	jmpi	200f8 <main>

000206ac <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   206ac:	00207e81 	jmpi	207e8 <alt_busy_sleep>

000206b0 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   206b0:	213fffc4 	addi	r4,r4,-1
   206b4:	210000a8 	cmpgeui	r4,r4,2
   206b8:	2000041e 	bne	r4,zero,206cc <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   206bc:	010000b4 	movhi	r4,2
   206c0:	000f883a 	mov	r7,zero
   206c4:	21027604 	addi	r4,r4,2520
   206c8:	00207481 	jmpi	20748 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   206cc:	d0a00317 	ldw	r2,-32756(gp)
   206d0:	10000926 	beq	r2,zero,206f8 <write+0x48>
{
   206d4:	deffff04 	addi	sp,sp,-4
   206d8:	dfc00015 	stw	ra,0(sp)
   206dc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   206e0:	00c01444 	movi	r3,81
   206e4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   206e8:	00bfffc4 	movi	r2,-1
   206ec:	dfc00017 	ldw	ra,0(sp)
   206f0:	dec00104 	addi	sp,sp,4
   206f4:	f800283a 	ret
   206f8:	d0a04104 	addi	r2,gp,-32508
        ALT_ERRNO = EBADFD;
   206fc:	00c01444 	movi	r3,81
   20700:	10c00015 	stw	r3,0(r2)
}
   20704:	00bfffc4 	movi	r2,-1
   20708:	f800283a 	ret

0002070c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2070c:	deffff04 	addi	sp,sp,-4
   20710:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   20714:	00208800 	call	20880 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20718:	00800044 	movi	r2,1
   2071c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20720:	dfc00017 	ldw	ra,0(sp)
   20724:	dec00104 	addi	sp,sp,4
   20728:	f800283a 	ret

0002072c <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   2072c:	00800134 	movhi	r2,4
   20730:	10840804 	addi	r2,r2,4128
   20734:	d0a04615 	stw	r2,-32488(gp)
   20738:	0080bef4 	movhi	r2,763
   2073c:	10bc2004 	addi	r2,r2,-3968
   20740:	d0a04515 	stw	r2,-32492(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
   20744:	f800283a 	ret

00020748 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   20748:	20c00017 	ldw	r3,0(r4)
{
   2074c:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   20750:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   20754:	01bfffd4 	movui	r6,65535
  while (ptr < end)
   20758:	29000136 	bltu	r5,r4,20760 <altera_avalon_jtag_uart_write+0x18>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   2075c:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   20760:	19c00137 	ldwio	r7,4(r3)
   20764:	31fffc2e 	bgeu	r6,r7,20758 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   20768:	29c00007 	ldb	r7,0(r5)
   2076c:	29400044 	addi	r5,r5,1
   20770:	19c00035 	stwio	r7,0(r3)
   20774:	003ff806 	br	20758 <altera_avalon_jtag_uart_write+0x10>

00020778 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
   20778:	d0e04517 	ldw	r3,-32492(gp)
  void* base = altera_avalon_timer_ts_base;
   2077c:	d0a04617 	ldw	r2,-32488(gp)
  if (!altera_avalon_timer_ts_freq)
   20780:	18000926 	beq	r3,zero,207a8 <alt_timestamp_start+0x30>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   20784:	00c00204 	movi	r3,8
   20788:	10c00135 	stwio	r3,4(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   2078c:	00ffffd4 	movui	r3,65535
   20790:	10c00235 	stwio	r3,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   20794:	10c00335 	stwio	r3,12(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   20798:	00c00104 	movi	r3,4
   2079c:	10c00135 	stwio	r3,4(r2)
    } 
  }
  return 0;
   207a0:	0005883a 	mov	r2,zero
   207a4:	f800283a 	ret
    return -1;
   207a8:	00bfffc4 	movi	r2,-1
}
   207ac:	f800283a 	ret

000207b0 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
   207b0:	d0a04517 	ldw	r2,-32492(gp)
   207b4:	10000826 	beq	r2,zero,207d8 <alt_timestamp+0x28>
  void* base = altera_avalon_timer_ts_base;
   207b8:	d0e04617 	ldw	r3,-32488(gp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   207bc:	18000435 	stwio	zero,16(r3)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   207c0:	18800437 	ldwio	r2,16(r3)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   207c4:	18c00537 	ldwio	r3,20(r3)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   207c8:	1806943a 	slli	r3,r3,16
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   207cc:	10bfffcc 	andi	r2,r2,65535
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   207d0:	10c4303a 	nor	r2,r2,r3
   207d4:	f800283a 	ret
        return 0xFFFFFFFF;
   207d8:	00bfffc4 	movi	r2,-1
#endif
  }
}
   207dc:	f800283a 	ret

000207e0 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
   207e0:	d0a04517 	ldw	r2,-32492(gp)
   207e4:	f800283a 	ret

000207e8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   207e8:	defffe04 	addi	sp,sp,-8
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   207ec:	008666b4 	movhi	r2,6554
{
   207f0:	dc000015 	stw	r16,0(sp)
   207f4:	dfc00115 	stw	ra,4(sp)
  if (big_loops)
   207f8:	10a66604 	addi	r2,r2,-26216
{
   207fc:	2021883a 	mov	r16,r4
  if (big_loops)
   20800:	1100182e 	bgeu	r2,r4,20864 <alt_busy_sleep+0x7c>
  big_loops = us / (INT_MAX/
   20804:	014666b4 	movhi	r5,6554
   20808:	29666644 	addi	r5,r5,-26215
   2080c:	00203700 	call	20370 <__udivsi3>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   20810:	00e00034 	movhi	r3,32768
  big_loops = us / (INT_MAX/
   20814:	1009883a 	mov	r4,r2
      __asm__ volatile (
   20818:	18ffffc4 	addi	r3,r3,-1
    for(i=0;i<big_loops;i++)
   2081c:	0005883a 	mov	r2,zero
      __asm__ volatile (
   20820:	18ffffc4 	addi	r3,r3,-1
   20824:	183ffe1e 	bne	r3,zero,20820 <alt_busy_sleep+0x38>
    for(i=0;i<big_loops;i++)
   20828:	10800044 	addi	r2,r2,1
   2082c:	113ffc16 	blt	r2,r4,20820 <alt_busy_sleep+0x38>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   20830:	017999b4 	movhi	r5,58982
   20834:	295999c4 	addi	r5,r5,26215
   20838:	00204300 	call	20430 <__mulsi3>
   2083c:	1405883a 	add	r2,r2,r16
   20840:	100690ba 	slli	r3,r2,2
   20844:	1885883a 	add	r2,r3,r2
    __asm__ volatile (
   20848:	10bfffc4 	addi	r2,r2,-1
   2084c:	103ffe1e 	bne	r2,zero,20848 <alt_busy_sleep+0x60>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   20850:	0005883a 	mov	r2,zero
   20854:	dfc00117 	ldw	ra,4(sp)
   20858:	dc000017 	ldw	r16,0(sp)
   2085c:	dec00204 	addi	sp,sp,8
   20860:	f800283a 	ret
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   20864:	200490ba 	slli	r2,r4,2
   20868:	1105883a 	add	r2,r2,r4
    __asm__ volatile (
   2086c:	10bfffc4 	addi	r2,r2,-1
   20870:	00bffe16 	blt	zero,r2,2086c <alt_busy_sleep+0x84>
   20874:	003ff606 	br	20850 <alt_busy_sleep+0x68>

00020878 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   20878:	f800283a 	ret

0002087c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2087c:	f800283a 	ret

00020880 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   20880:	000170fa 	wrctl	ienable,zero
}
   20884:	f800283a 	ret

00020888 <memcpy>:
   20888:	2005883a 	mov	r2,r4
   2088c:	0007883a 	mov	r3,zero
   20890:	30c0011e 	bne	r6,r3,20898 <memcpy+0x10>
   20894:	f800283a 	ret
   20898:	28cf883a 	add	r7,r5,r3
   2089c:	39c00003 	ldbu	r7,0(r7)
   208a0:	10c9883a 	add	r4,r2,r3
   208a4:	18c00044 	addi	r3,r3,1
   208a8:	21c00005 	stb	r7,0(r4)
   208ac:	003ff806 	br	20890 <memcpy+0x8>
